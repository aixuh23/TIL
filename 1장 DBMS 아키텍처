# 1장 DBMS 아키텍처
____________________________________________________________________________________________________
          SQL 구문
            ↓
        쿼리평가엔진 : 계획을 세우고 실행하는 DBMS의 핵심 기능 담당 모듈 (파서/실행플랜/연산평가/옵티마이저)

-[DBMS] --------------------------------------------------------------------------------------
|  트랜잭션M    ↔ 접근메서드  
|  락M         ↔ 버퍼M              ↔  리커버리M
|  동시실행제어 ↔ 디스크용량M
---------------------------------------------------------------------------------------------
    * 버퍼M : 메모리 영역 관리 역할 (EX.데이터를 어떻게, 어느 정도 기간동안 올릴지 정함)
    * 디스크용량M : 어디에 어떻게 데이터를 저장할지 관리, 데이터 읽고쓰기 제어 역할
    * 트랜잭션M & 락M : 트랜잭션(DB상태변환을 위한 논리적단위)의 정합성을 유지+실행, 필요 시 데이터 락으로 요청 대기 역할
    * 리커버리M : 정기적인 데이터 백업, 문제가 생겼을 시 데이터 복구 역할

____________________________________________________________________________________________________

## DBMS와 기억장치의 관계
  * 기억 비용 : 데이터를 저장하는데 소모되는 비용  
  * 버퍼 || 캐시 : 성능 향상을 목적으로 데이터를 저장하는 메모리
  
  Q) 비싸고 양이 크지도 않음에도 데이터를 메모리에 올리는 이유는?
  A) SQL 실행 속도를 빠르게 만들기 위함! => 디스크에서 가져올 필요 없이 곧바로 메모리에서 읽어서 가져오기 때문


  • DBMS가 데이터를 유지하기 위해 사용하는 메모리
    - 데이터 캐시
      : 디스크에 있는 데이터 일부를 메모리에 유지하기 위해 사용하는 메모리 영역
        → IF) 데이터캐시에 데이터 있으면 속도 빠름 but, 없으면 찾으러 가야해서 느림     [SELECT]

    - 로그 버퍼
      : 갱신 관련 쿼리를 받으면 
        1) 로그 버퍼 위에 변경 정보 보내고 2) 이후에 변경 수행 (비동기식 처리)         [INSERT | DELETE | UPDATE | MERGE]

      => 로그 버퍼가 크게 잡혀있다?    --> 갱신 처리 관련하여 큰 부하 가능성 有
          데이터 캐시가 크게 잡혀있다? --> 검색 & 검색 관련 처리가 중심



### 옵티마이저 구조
#### 메모리의 작동 방식

