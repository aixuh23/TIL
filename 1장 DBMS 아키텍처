# 1장 DBMS 아키텍처
____________________________________________________________________________________________________
          SQL 구문
            ↓
        쿼리평가엔진 : 계획을 세우고 실행하는 DBMS의 핵심 기능 담당 모듈 (파서/실행플랜/연산평가/옵티마이저)

-[DBMS] --------------------------------------------------------------------------------------
|  트랜잭션M             ↔ 접근메서드  
|  락M                  ↔ 버퍼M              ↔  리커버리M
|  동시실행제어          ↔ 디스크용량M
---------------------------------------------------------------------------------------------
    * 버퍼M : 메모리 영역 관리 역할 (EX.데이터를 어떻게, 어느 정도 기간동안 올릴지 정함)
    * 디스크용량M : 어디에 어떻게 데이터를 저장할지 관리, 데이터 읽고쓰기 제어 역할
    * 트랜잭션M & 락M : 트랜잭션(DB상태변환을 위한 논리적단위)의 정합성을 유지+실행, 필요 시 데이터 락으로 요청 대기 역할
    * 리커버리M : 정기적인 데이터 백업, 문제가 생겼을 시 데이터 복구 역할

____________________________________________________________________________________________________

## DBMS와 기억장치의 관계
  * 기억 비용 : 데이터를 저장하는데 소모되는 비용  
  * 버퍼 || 캐시 : 성능 향상을 목적으로 데이터를 저장하는 메모리
  
  Q) 비싸고 양이 크지도 않음에도 데이터를 메모리에 올리는 이유는?
  A) SQL 실행 속도를 빠르게 만들기 위함! => 디스크에서 가져올 필요 없이 곧바로 메모리에서 읽어서 가져오기 때문


  • DBMS가 데이터를 유지하기 위해 사용하는 메모리
    - 데이터 캐시
      : 디스크에 있는 데이터 일부를 메모리에 유지하기 위해 사용하는 메모리 영역
        → IF) 데이터캐시에 데이터 있으면 속도 빠름 but, 없으면 찾으러 가야해서 느림     [SELECT]

    - 로그 버퍼
      : 갱신 관련 쿼리를 받으면 
        1) 로그 버퍼 위에 변경 정보 보내고 2) 이후에 변경 수행 (비동기식 처리)         [INSERT | DELETE | UPDATE | MERGE]

      => 로그 버퍼가 크게 잡혀있다?    --> 갱신 처리 관련하여 큰 부하 가능성 有
          데이터 캐시가 크게 잡혀있다? --> 검색 & 검색 관련 처리가 중심


    - 워킹 메모리
      : 정렬 || 해시 관련 처리에 사용되는  메모리 영역                                [ORDER BY]
          메모리가 부족할 경우 저장소로 사용함 like swap 


### DBMS와 실행계획
____________________________________________________________________________________________________
                              (0) 쿼리 
                              (1) 파서               : 구문 분석 
                               ↓ 파스된 쿼리
-[옵티마이저] --------------------------------------------------------------------------------------                    

          (2) 플랜 생성          (3) 비용 평가           → (4) 카탈로그 M
---------------------------------------------------------------------------------------------------
                               ↓ 실행 계획
                              (5) 플랜 평가          : 최적의 실행 결과 선택
____________________________________________________________________________________________________
          
          What is 옵티마이저?? It's like 최적화. 
                    ● 최적화 대상은 실행 계획
                              1. 조건 고려해서 선택 가능한 많은 실행 계획 작성
                              2. 비용 연산 -> 가장 낮은 비용을 가진 실행 계획 선택
          
          카탈로그 M : 옵티마이저에 중요한 정보 제공하는 것!! 
           + What is 카탈로그?? It's DBMS 내부 정보를 모아놓은 테이블 (like 테이블 또는 인덱스 통계 정보)
                    - 각 TB의 레코드 수 | 필드 수, 필드 크기 | 인덱스 정보 등


          => 최적의 실행계획이 작성되려면 올바른 통계정보가 모이도록 갱신 필요
                    in Oracle >> exec DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => [스키마이름],TABNAME=>[TB 이름])


#### 실행계획 중요성
          ■ 실행계획 공통적 출력 포맷
                    1) 조작 대상 객체
                    2) 객체에 대한 조작의 종류
                    3) 조작 대상이 되는 레코드 수

          - SQL 구문들이 어떤 접근 경로로 데이터를 검색하는지 아는가
          - 제대로된 SQL 구문을 작성하려면 어떤 테이블 설정이 효율적인가
          - 어떤 SQL 구문이 주어졌을 때 어떤 실행 계획이 나올지 예측 가능해야함.

 ※정리※
 - DB는 다양한 트레이드오프의 균형을 잡으려는 미들웨어
 - DB는 SQL을 실행 가능한 절차로 변환하고자 실행 계획을 만듦


[연습문제] Q) DBMS 데이터 캐시는 용량이 한정되어 있는 메모리에서 효율적으로 데이터를 유지하고자 다양한 알고리즘을 사용함. 어떤 알고리즘을 사용할까?
          A) LRU(Least Recently Used)
                    : 참조 빈도가 가장 적은 것을 캐시에서 버리는 알고리즘
                    >> 참조 빈도가 많은 데이터가 캐시에 오래 남을 수 있으므로 전체적인 캐시 히트율이 상승함. 
